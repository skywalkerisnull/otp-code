@page "/"
@using QRCoder
@using Microsoft.AspNetCore.WebUtilities
@using System.Reflection
@using Microsoft.Extensions.Primitives
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>QR Code Generator</PageTitle>

<h1>QR Code Generator</h1>

@if (!hideInputs)
{
    <div id="inputFields">
        @foreach (var input in inputDefinitions)
        {
            <div>
                <label for="@input.Name">@input.Name:</label>
                @if (input.Type == InputType.Dropdown)
                {
                    <select id="@input.Name" @bind="inputValues[input.Name]" 
                        @bind:after="() => OnPropertyChanged(input.Name)">
                        @foreach (var option in input.DropdownOptions)
                        {
                            <option value="@option">@option</option>
                        }
                    </select>
                }
                else
                {
                    <input type="@input.Type.ToString().ToLower()" 
                        id="@input.Name" 
                        @bind="inputValues[input.Name]" 
                        @bind:after="() => OnPropertyChanged(input.Name)" 
                        @oninput="@(e => OnPropertyChanged(input.Name))" placeholder="@input.Placeholder">
                }
                @if (input.ValidationRules.Any())
                {
                    <div class="validation-rules">
                        @foreach (var rule in input.ValidationRules)
                        {
                            <span>@rule.ErrorMessage</span>
                        }
                    </div>
                }
            </div>
        }
    </div>
}
<div id="toggleContainer">
    <label for="toggleCheckbox">Hide Input Fields:</label>
    <input type="checkbox" id="toggleCheckbox" @bind="hideInputs">
</div>
<div>
    @if (!string.IsNullOrEmpty(qrCodeDataUrl))
    {
        <img src="@qrCodeDataUrl" alt="QR Code" />
    }
</div>

@code {
    private BaseQRCode qrCode;
    private List<InputDefinition> inputDefinitions;
    private bool hideInputs;
    private Dictionary<string, string> inputValues = new Dictionary<string, string>();
    private string qrCodeDataUrl;
    private Timer updateTimer;
    private QRCodeGeneratorService qrCodeGeneratorService = new QRCodeGeneratorService();
    private bool formSubmitted = false;

    protected override void OnInitialized()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var queryParams = QueryHelpers.ParseQuery(uri.Query);

        if (!queryParams.TryGetValue("qrcodetype", out var typeValue) || !Enum.TryParse(typeValue, true, out QRCodeType qrCodeType))
        {
            qrCodeType = QRCodeType.OTP; // Default to OTP if type is not specified or invalid
        }

        switch (qrCodeType)
        {
            case QRCodeType.OTP:
                qrCode = new OTPQRCode(uri.ToString());
                break;
            default:
                throw new NotSupportedException($"QR code type '{qrCodeType}' is not supported.");
        }

        inputDefinitions = qrCode.GetInputDefinitions().ToList();

        foreach (var input in inputDefinitions)
        {
            if (queryParams.TryGetValue(input.Name, out var value))
            {
                inputValues[input.Name] = value;
            }
            else
            {
                var propertyValue = GetPropertyValue(input.Name)?.ToString();
                inputValues[input.Name] = propertyValue ?? string.Empty;
            }
        }

        if (queryParams.TryGetValue("hideInputs", out var hideInputsValue))
        {
            hideInputs = bool.Parse(hideInputsValue);
        }

        GenerateQrCode();

        // Set up a timer to update the QR code periodically
        updateTimer = new Timer(UpdateQrCodePeriodically, null, TimeSpan.FromMilliseconds(200), TimeSpan.FromMilliseconds(200));
    }

    private async void GenerateQrCode()
    {
        formSubmitted = true;

        if (AllRequiredFieldsFilled() && qrCode.ValidateInput())
        {
            var otpUrl = qrCode.ToString();
            qrCodeDataUrl = await qrCodeGeneratorService.GenerateQrCodeAsync(otpUrl);
        }
        else
        {
            qrCodeDataUrl = null;
        }
    }

    private bool AllRequiredFieldsFilled()
    {
        foreach (var input in inputDefinitions)
        {
            var value = GetPropertyValue(input.Name);
            if (input.ValidationRules.Any(rule => rule.Rule == "required") && string.IsNullOrEmpty(value?.ToString()))
            {
                return false;
            }
        }
        return true;
    }

    private void UpdateUrlParams()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var queryParams = QueryHelpers.ParseQuery(uri.Query).ToDictionary(kvp => kvp.Key, kvp => kvp.Value.ToString());

        // Ensure QRCodeType is the first parameter
        queryParams["qrcodetype"] = qrCode.GetType().Name;

        foreach (var input in inputDefinitions)
        {
            queryParams[input.Name] = GetPropertyValue(input.Name)?.ToString();
        }

        queryParams["hideInputs"] = hideInputs.ToString();

        var newUri = QueryHelpers.AddQueryString(uri.GetLeftPart(UriPartial.Path), queryParams);
        JS.InvokeVoidAsync("history.pushState", null, "", newUri);
        Console.WriteLine($"Updated URL: {newUri}");
    }

    private void OnPropertyChanged(string propertyName)
    {
        if (inputValues.TryGetValue(propertyName, out var value))
        {
            SetPropertyValue(propertyName, value);
            UpdateUrlParams();
            GenerateQrCode();
        }
    }

    private void UpdateQrCodePeriodically(object state)
    {
        InvokeAsync(() =>
        {
            UpdateUrlParams();
            GenerateQrCode();
            StateHasChanged();
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("addShortcutListener", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public void ToggleHideInputs()
    {
        hideInputs = !hideInputs;
        UpdateUrlParams();
    }

    public void Dispose()
    {
        updateTimer?.Dispose();
    }

    private object GetPropertyValue(string propertyName)
    {
        var property = qrCode.GetType().GetProperty(propertyName);
        return property?.GetValue(qrCode);
    }

    private void SetPropertyValue(string propertyName, object value)
    {
        var property = qrCode.GetType().GetProperty(propertyName);
        if (property != null)
        {
            try
            {
                if (property.PropertyType.IsEnum && value is string enumStringValue)
                {
                    if (Enum.TryParse(property.PropertyType, enumStringValue, true, out var enumValue))
                    {
                        property.SetValue(qrCode, enumValue);
                    }
                    else
                    {
                        throw new ArgumentException($"Invalid value '{enumStringValue}' for enum type '{property.PropertyType.Name}'");
                    }
                }
                else if (value is string stringValue)
                {
                    var convertedValue = Convert.ChangeType(stringValue, property.PropertyType);
                    property.SetValue(qrCode, convertedValue);
                }
                else
                {
                    throw new ArgumentException($"Value for property '{propertyName}' must be a string.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error setting property '{propertyName}': {ex.Message}");
                throw new ArgumentException($"Error setting property '{propertyName}': {ex.Message}", ex);
            }
        }
        else
        {
            Console.WriteLine($"Property '{propertyName}' not found on type '{qrCode.GetType().Name}'");
        }
    }
}