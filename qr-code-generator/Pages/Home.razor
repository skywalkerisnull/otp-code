@page "/"
@using QRCoder
@using Microsoft.AspNetCore.WebUtilities
@using System.Reflection
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>QR Code Generator</PageTitle>

<h1>QR Code Generator</h1>

@if (!hideInputs)
{
    <div id="inputFields">
        @foreach (var input in inputDefinitions)
        {
            <div>
                <label for="@input.Name">@input.Name:</label>
                <input type="@input.Type.ToString().ToLower()" 
                    id="@input.Name" 
                    @bind="inputValues[input.Name]" 
                    @bind:after="() => SetPropertyValue(input.Name, inputValues[input.Name])" 
                    @oninput="@(e => OnPropertyChanged(input.Name))" placeholder="@input.Placeholder">
                @if (input.ValidationRules.Any())
                {
                    <div class="validation-rules">
                        @foreach (var rule in input.ValidationRules)
                        {
                            <span>@rule.ErrorMessage</span>
                        }
                    </div>
                }
            </div>
        }
    </div>
}
<div id="toggleContainer">
    <label for="toggleCheckbox">Hide Input Fields:</label>
    <input type="checkbox" id="toggleCheckbox" @bind="hideInputs">
</div>
<div>
    @if (!string.IsNullOrEmpty(qrCodeDataUrl))
    {
        <img src="@qrCodeDataUrl" alt="QR Code" />
    }
</div>

@code {
    private BaseQRCode qrCode;
    private List<InputDefinition> inputDefinitions;
    private bool hideInputs;
    private Dictionary<string, string> inputValues = new Dictionary<string, string>();
    private string qrCodeDataUrl;
    private Timer updateTimer;
    private QRCodeGeneratorService qrCodeGeneratorService = new QRCodeGeneratorService();
    private bool formSubmitted = false;

    protected override void OnInitialized()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var queryParams = QueryHelpers.ParseQuery(uri.Query);

        if (!queryParams.TryGetValue("type", out var typeValue))
        {
            typeValue = "OTP"; // Default to OTP if type is not specified
        }

        switch (typeValue)
        {
            case "OTP":
                qrCode = new OTPQRCode(uri.ToString());
                break;
            // Add more cases for other types in the future
            default:
                throw new NotSupportedException($"QR code type '{typeValue}' is not supported.");
        }

        inputDefinitions = qrCode.GetInputDefinitions().ToList();

        foreach (var input in inputDefinitions)
        {
            var propertyValue = GetPropertyValue(input.Name)?.ToString();
            inputValues[input.Name] = propertyValue ?? string.Empty;
        }

        GenerateQrCode();

        // Set up a timer to update the QR code periodically
        updateTimer = new Timer(UpdateQrCodePeriodically, null, TimeSpan.FromMilliseconds(200), TimeSpan.FromMilliseconds(200));
    }

    private async void GenerateQrCode()
    {
        formSubmitted = true;

        if (AllRequiredFieldsFilled() && qrCode.ValidateInput())
        {
            var otpUrl = qrCode.ToString();
            qrCodeDataUrl = await qrCodeGeneratorService.GenerateQrCodeAsync(otpUrl);
        }
        else
        {
            qrCodeDataUrl = null;
        }
    }

    private bool AllRequiredFieldsFilled()
    {
        foreach (var input in inputDefinitions)
        {
            var value = GetPropertyValue(input.Name);
            if (input.ValidationRules.Any(rule => rule.Rule == "required") && string.IsNullOrEmpty(value?.ToString()))
            {
                return false;
            }
        }
        return true;
    }

    private void UpdateUrlParams()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var queryParams = QueryHelpers.ParseQuery(uri.Query).ToDictionary(kvp => kvp.Key, kvp => (object?)kvp.Value.ToString());

        foreach (var input in inputDefinitions)
        {
            queryParams[input.Name] = GetPropertyValue(input.Name)?.ToString();
        }

        queryParams["hideInputs"] = hideInputs.ToString();

        var newUri = Navigation.GetUriWithQueryParameters(queryParams);
        JS.InvokeVoidAsync("history.pushState", null, "", newUri);
        Console.WriteLine($"Updated URL: {newUri}");
    }

    private void OnPropertyChanged(string propertyName)
    {
        Console.WriteLine($"{propertyName} Changed");
        UpdateUrlParams();
        GenerateQrCode();
    }

    private void UpdateQrCodePeriodically(object state)
    {
        InvokeAsync(() =>
        {
            UpdateUrlParams();
            GenerateQrCode();
            StateHasChanged();
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("addShortcutListener", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public void ToggleHideInputs()
    {
        hideInputs = !hideInputs;
        UpdateUrlParams();
    }

    public void Dispose()
    {
        updateTimer?.Dispose();
    }

    private object GetPropertyValue(string propertyName)
    {
        var property = qrCode.GetType().GetProperty(propertyName);
        return property?.GetValue(qrCode);
    }

    private void SetPropertyValue(string propertyName, object value)
    {
        var property = qrCode.GetType().GetProperty(propertyName);
        property?.SetValue(qrCode, value);
    }
}